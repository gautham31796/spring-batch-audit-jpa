-- Spring Batch metadata for PostgreSQL (with sequences)
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'batch_job_seq') THEN
    CREATE SEQUENCE BATCH_JOB_SEQ START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'batch_job_execution_seq') THEN
    CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'batch_step_execution_seq') THEN
    CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS BATCH_JOB_INSTANCE  (
  JOB_INSTANCE_ID BIGINT PRIMARY KEY,
  VERSION BIGINT,
  JOB_NAME VARCHAR(100) NOT NULL,
  JOB_KEY  VARCHAR(32) NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS JOB_INST_UN ON BATCH_JOB_INSTANCE(JOB_NAME, JOB_KEY);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION  (
  JOB_EXECUTION_ID BIGINT PRIMARY KEY,
  VERSION BIGINT,
  JOB_INSTANCE_ID BIGINT NOT NULL,
  CREATE_TIME TIMESTAMP NOT NULL,
  START_TIME TIMESTAMP,
  END_TIME TIMESTAMP,
  STATUS VARCHAR(10),
  EXIT_CODE VARCHAR(2500),
  EXIT_MESSAGE VARCHAR(2500),
  LAST_UPDATED TIMESTAMP,
  JOB_CONFIGURATION_LOCATION VARCHAR(2500),
  CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
    REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);
CREATE INDEX IF NOT EXISTS JOB_INST_EXEC_FK_IDX ON BATCH_JOB_EXECUTION(JOB_INSTANCE_ID);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_PARAMS  (
  JOB_EXECUTION_ID BIGINT NOT NULL,
  PARAMETER_NAME VARCHAR(100) NOT NULL,
  PARAMETER_TYPE VARCHAR(100) NOT NULL,
  PARAMETER_VALUE VARCHAR(2500),
  IDENTIFYING CHAR(1) NOT NULL,
  CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION  (
  STEP_EXECUTION_ID BIGINT PRIMARY KEY,
  VERSION BIGINT NOT NULL,
  STEP_NAME VARCHAR(100) NOT NULL,
  JOB_EXECUTION_ID BIGINT NOT NULL,
  START_TIME TIMESTAMP NOT NULL,
  END_TIME TIMESTAMP,
  STATUS VARCHAR(10),
  COMMIT_COUNT BIGINT,
  READ_COUNT BIGINT,
  FILTER_COUNT BIGINT,
  WRITE_COUNT BIGINT,
  READ_SKIP_COUNT BIGINT,
  WRITE_SKIP_COUNT BIGINT,
  PROCESS_SKIP_COUNT BIGINT,
  ROLLBACK_COUNT BIGINT,
  EXIT_CODE VARCHAR(2500),
  EXIT_MESSAGE VARCHAR(2500),
  LAST_UPDATED TIMESTAMP,
  CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);
CREATE INDEX IF NOT EXISTS JOB_EXEC_STEP_FK_IDX ON BATCH_STEP_EXECUTION(JOB_EXECUTION_ID);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_CONTEXT  (
  JOB_EXECUTION_ID BIGINT PRIMARY KEY,
  SHORT_CONTEXT TEXT NOT NULL,
  SERIALIZED_CONTEXT TEXT,
  CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_CONTEXT  (
  STEP_EXECUTION_ID BIGINT PRIMARY KEY,
  SHORT_CONTEXT TEXT NOT NULL,
  SERIALIZED_CONTEXT TEXT,
  CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
    REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

ALTER TABLE BATCH_JOB_INSTANCE
  ALTER COLUMN JOB_INSTANCE_ID SET DEFAULT nextval('BATCH_JOB_SEQ');
ALTER TABLE BATCH_JOB_EXECUTION
  ALTER COLUMN JOB_EXECUTION_ID SET DEFAULT nextval('BATCH_JOB_EXECUTION_SEQ');
ALTER TABLE BATCH_STEP_EXECUTION
  ALTER COLUMN STEP_EXECUTION_ID SET DEFAULT nextval('BATCH_STEP_EXECUTION_SEQ');
